
###########################
#ORIGINAL FORK MACRO FROM GITHUB
##########################
# Macros for a modified Ender-3 v2 with Sprite Pro Extruder,
# CR Touch, with a 4.2.7 silent board
     #BTT SKR MINI E3V3 (THE PIT D1) MB 2/6/24
# Replace the slicer's custom start and end g-code scripts with
# START_PRINT BED_TEMP={material_bed_temperature_layer_0} EXTRUDER_TEMP={material_print_temperature_layer_0} 
# and END_PRINT.

#=====================================================
# START PRINT
#=====================================================

[gcode_macro START_PRINT]
gcode:

    RESPOND MSG="Preparing to print"
    # Get first-layer bed-temp from slicer
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    # Get first-layer extruder-temp from slicer
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Setup KAMP variables
    SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1
    SETUP_LINE_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1 Z_HEIGHT=.3 PURGE_AMOUNT=20 LINE_LENGTH=25
    G90 # use absolute coordinates
    M83 # extruder relative mode
    RESPOND MSG="Warming up for bed leveling"
    M104 S170 # set extruder temp for bed leveling
    M140 S{BED_TEMP} # set bed temp
    M109 S170 # wait for bed leveling temp
    M190 S{BED_TEMP} ; wait for bed temp
    G28 # home all axis
    BED_MESH_PROFILE LOAD= default# mesh bed
    BED_MESH_CLEAR
    RESPOND MSG="KAMP Adaptive Bed Meshing"
    BED_MESH_CALIBRATE
    RESPOND MSG="Heating to print temp"
    M104 S{EXTRUDER_TEMP}# set extruder temp
    G0 Z50 F240
    RESPOND MSG="Clean bed and nozzle"
    G0 X2 Y220 F3000 #Clean Nozzle and Bed
    M109 S{EXTRUDER_TEMP} # wait for extruder temp
    RESPOND MSG="KAMP Line Purge"
    LINE_PURGE # purge nozzle
    RESPOND MSG="Print Started"

#=====================================================
# END PRINT
#=====================================================

[gcode_macro END_PRINT]
gcode:

    #Fix-up extruder
    RESPOND MSG="Print Finished"
    G91
    G1 E-.5 Z0.2 F2400
    G1 X5 Y5 F6000
    G1 Z10
    G90

    #Present print
    G1 Z{printer.toolhead.position.z + 10} F600
    G1 X0 Y220 F6000
    M106 S0
    M104 S0
    M140 S0

    #Disable Steppers
    M84 X Y E


#=====================================================
# BUILD THE BED MESH
#=====================================================
# G29 that does (1) home all (2) run z align (3)get bed mesh (4) move 
# nozzle to corner so it doesnt ooze on the bed while heating up.
# Change save to "save=yourprinter_mesh" cant use default

[gcode_macro G29]
gcode:
   
   G34
    MECHANICAL_GANTRY_CALIBRATION
    
    G28
    BED_MESH_CALIBRATE
    
    G0 X0 Y0 Z10 F6000
   BED_MESH_PROFILE save=default

#=====================================================
# PARK PRINTER
#=====================================================

[gcode_macro M125]
gcode:
    SAVE_GCODE_STATE NAME=parking
    M117 Parking toolhead
    G91
    G1 Z10 F600 # move up 5 mm
    G90
    G1 X5 Y225 F4000 # move to park position
    RESTORE_GCODE_STATE NAME=parking


#======================================================
# LOAD FILAMENT
#======================================================

[gcode_macro Load_Filament]
gcode:
    SAVE_GCODE_STATE NAME=loading_filament
    M117 Loading Filament
    M83
    G92 E0.0
    G1 E5 F200  # Load filament into sprite and prime 5mm 
    G92 E0.0
    RESTORE_GCODE_STATE NAME=loading_filament

#======================================================
# UNLOAD FILAMENT
#======================================================

[gcode_macro Unload_Filament]
gcode:
    SAVE_GCODE_STATE NAME=unloading_filament
    M125 # park
    M117 Unloading Filament 
    G91 # set relative
    G1 E10 F100 
    G92 E0.0
    G1 E-5 F3000 # Unload filament from sprite 5mm 
    G92 E0.0
    RESTORE_GCODE_STATE NAME=unloading_filament

#======================================================
# FILAMENT CHANGE
#======================================================

[gcode_macro Filament_Change]
gcode:
    M117 Filament Change
    M118 Filament Change
    SAVE_GCODE_STATE NAME=filament_change
    PAUSE
    G91 # relative
    G1 E-1 F300 # retract 1
    M125 # park
    G1 E-5 F300 # retract 5
    RESTORE_GCODE_STATE NAME=filament_change

#=====================================================
# PAUSE
#=====================================================

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(5) %}      #edit to your park position
    {% set y = params.Y|default(225) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E-{e} F2100
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
    G1 Z{z_safe}
    G90
    G1 X{x} Y{y} F6000
    {% else %}
    {action_respond_info("Printer not homed")}
    {% endif %}

#=====================================================
# RESUME
#=====================================================

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
    {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E{e} F2100
    {% else %}
    {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

#=====================================================
# CANCEL
#=====================================================

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    G0 X5 Y220 Z10 #raise extruder and clear
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

#########################################################################################################

##############################################################################################

[gcode_macro bed_mesh_check]
description: Warns if bed_mesh config may generate an invalid mesh.
  Usage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]
gcode:
  {% if printer.bed_mesh is defined %}
    {% set action = action_respond_info if params.ABORT|default(0)|int == 0 else
                    action_raise_error %}
    {% set settings = printer.configfile.settings %}
    {% set x_min = settings.stepper_x.position_min %}
    {% set y_min = settings.stepper_y.position_min %}
    {% set x_max = settings.stepper_x.position_max %}
    {% set y_max = settings.stepper_y.position_max %}

    {% set label = "[bed_mesh] config" %}
    {% if "MESH_MIN" in params %}
      {% set label = "BED_MESH_CALIBRATE params" %}
      {% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}
      {% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}
    {% else %}
      {% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}
      {% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}
    {% endif %}
    {% if "MESH_MAX" in params %}
      {% set label = "BED_MESH_CALIBRATE params" %}
      {% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}
      {% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}
    {% else %}
      {% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}
      {% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}
    {% endif %}

    {% if "bltouch" in settings %}
        {% set x_offset = settings.bltouch.x_offset %}
        {% set y_offset = settings.bltouch.y_offset %}
        {% set probe = "bltouch" %}
    {% elif "probe" in settings %}
        {% set x_offset = settings.probe.x_offset %}
        {% set y_offset = settings.probe.y_offset %}
        {% set probe = "probe" %}
    {% else %}
        {% set x_offset = 0.0 %}
        {% set y_offset = 0.0 %}
    {% endif %}

    {% set output = [] %}
    {% set warn =
         "* mesh_%s (%f, %f) adjusted by " ~ probe ~
         ".%s_offset (%f) can move out of range for "
         "stepper_%s.position_%s (%f)." %}
    {% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}
      {% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
                                           'x', x_offset, 'x', 'min', x_min)) %}
    {% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}
      {% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
                                           'x', x_offset, 'x', 'max', x_max)) %}
    {% endif %}
    {% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}
      {% set dummy = output.append(warn % ('min', mesh_min_x, mesh_min_y,
                                           'y', y_offset, 'y', 'min', y_min)) %}
    {% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}
      {% set dummy = output.append(warn % ('max', mesh_max_x, mesh_max_y,
                                           'y', y_offset, 'y', 'max', y_max)) %}
    {% endif %}

    {% if output %}
      { action(
        "Warning: The following issue(s) were detected in your " ~ label ~
        ":\n" ~ output|join("\n")) }
    {% endif %}
  {% endif %}

    
